name: ci

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    paths-ignore:
      - ./*.md
      - ./*.txt
      - .gitignore

defaults:
  run:
    shell: bash

env:
  GRADLE_OPTS: -Dorg.gradle.jvmargs="-XX:MaxMetaspaceSize=2g"
  JDK_VERSION: 19

jobs:
  build:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ env.JDK_VERSION }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_VERSION }}
          distribution: "temurin"
          server-id: github
          settings-path: ${{ github.workspace }}
          cache: "gradle"

      - name: ./gradlew permissions
        run: chmod +x ./gradlew

      - name: Prepare android sdk
        run: |
          sudo apt install sdkmanager -y
          yes | sdkmanager --licenses

      - name: Prepare libraries configs
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
          MAPBOX_API_CREDS: ${{ secrets.MAPBOX_API_CREDS }}
          MAPBOX_PUBLIC_KEY: ${{ secrets.MAPBOX_PUBLIC_KEY }}
        run: |
          echo $GOOGLE_SERVICES_JSON > ./app/google-services.json
          mkdir -p ~/.gradle
          echo $MAPBOX_API_CREDS > ~/.gradle/gradle.properties
          echo $MAPBOX_PUBLIC_KEY > ./app/src/main/res/values/dev.xml

      - name: Test with JDK ${{ env.JDK_VERSION }}
        uses: gradle/gradle-build-action@v2
        with:
          arguments: |
            test

      - name: Build with analyze
        uses: gradle/gradle-build-action@v2
        with:
          arguments: |
            build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Gradle dependency submission
        if: always()
        uses: mikepenz/gradle-dependency-submission@main
        with:
          gradle-build-module: :app
          gradle-build-configuration: debugCompileClasspath

      - name: Qodana scan
        if: always()
        uses: JetBrains/qodana-action@main
        env:
          QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}
          
      - name: Trunk checks
        if: always()
        uses: trunk-io/trunk-action@v1
        with:
          check-mode: all
          trunk-token: ${{ secrets.TRUNK_TOKEN }}
